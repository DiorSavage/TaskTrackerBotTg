from aiogram import F, Router, Bot
from aiogram import types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration as htd

from app.requests import set_user_in_db, create_task, get_assigned_tasks, get_all_tasks, get_user_data, change_status, create_team, get_teams_as_creator, get_processed_tasks, stop_task, get_team_executors, get_executors_from_team, get_user_tasks, update_team_executors, get_processed_task, update_executors_in_task
from app.schemas import UserCreate, TaskCreate
from app.keyboards import main_keyboard, confirm_task_keyboard, team_choose_keyboard, executor_choose_keyboard, processed_tasks_keyboard
from app.utils.celery_worker import confirm_task, notificate_user

from app.utils.redis_client import RedisUsers

from datetime import datetime

router = Router()

status_emoji = {
	"in_process": "üßë‚Äçüíª",
	"completed": "‚úÖ",
	"canceled": "‚ùå"
}

class NewTask(StatesGroup):
	task_description = State()
	expire_at = State()
	team = State()
	executors_username = State()
	task_file = State()

class NewTeam(StatesGroup):
	team_name = State()
	executors_username = State()

class AddTeam(StatesGroup):
	team_id = State()
	new_executors = State() #? list[str]

class ExecutorsTask(StatesGroup):
	task_id = State()
	team_id = State()
	executors = State()

@router.message(CommandStart())
async def start_command(message: Message):
	try:
		new_user_data = UserCreate(
			first_name=message.from_user.first_name,
			last_name=message.from_user.last_name,
			username=message.from_user.username,
			telegram_id=message.from_user.id
		)
		[status, user_data] = await get_user_data(user_id=new_user_data.telegram_id)
		if user_data is None:
			[status, user_data] = await set_user_in_db(user_data=new_user_data)
		if status == "not_registred":
			message_text = (
				f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.first_name}! üéâ\n\n"
				f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ @{user_data.username}. ‚úÖ\n"
				f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º. üöÄ\n"
				f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ: üìã"
			)
			await message.answer_photo(
				photo=FSInputFile("./app/images/welcome_image.gif"),
				caption=message_text,
				reply_markup=await main_keyboard(user_data=user_data)
			)
		else:
			message_text = (
				f"üëã –ü—Ä–∏–≤–µ—Ç, {user_data.first_name}! üëã\n\n"
				f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ: üìã"
			)
			await message.answer_photo(
				photo=FSInputFile("./app/images/welcome_image.gif"),
				caption=message_text,
				reply_markup=await main_keyboard(user_data=user_data)
			)
	except Exception as exc:
		print(exc)
		await message.answer("Error with creating a user")

@router.callback_query(F.data == "all_executors")
async def get_all_executors_handler(callback: CallbackQuery):
	teams = await get_teams_as_creator(creator_id=callback.from_user.id)

	if not teams:
		await callback.message.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return

	message_text = "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
	for team in teams:
		message_text += (
			f"üìã –ö–æ–º–∞–Ω–¥–∞: *{team.name}*\n"
			f"üëë –ó–∞–∫–∞–∑—á–∏–∫: {htd.link(f'@{team.creator.username}', f'tg://user?id={team.creator.telegram_id}')}\n"
			f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n"
		)
		if team.executors:
			for executor in team.executors:
				message_text += (
					f"- {htd.link(f'@{executor.username}', f'tg://user?id={executor.telegram_id}')} - —Å—Ç–∞—Ç—É—Å: {"üòé –ê–∫—Ç–∏–≤–µ–Ω" if executor.status else "üò¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}\n"
				)
		else:
			message_text += "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.\n"
		message_text += "\n" + "-" * 30 + "\n"

	await callback.message.answer(text=message_text, parse_mode="HTML")

@router.callback_query(F.data == "set_task")
async def set_task_handler(callback: CallbackQuery, state: FSMContext):
	await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
	await state.set_state(NewTask.task_description)

@router.message(NewTask.task_description)
async def process_task_description(message: types.Message, state: FSMContext):
	task_description = message.text.strip()
	if not task_description:
		await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞.")
		return
	await state.update_data(task_description=task_description)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM):")
	await state.set_state(NewTask.expire_at)

@router.message(NewTask.expire_at)
async def process_expire_at(message: types.Message, state: FSMContext):
	expire_at_str = message.text.strip()
	try:
		expire_at = datetime.strptime(expire_at_str, "%d.%m.%Y %H:%M")
	except ValueError:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM.")
		return
	my_teams = await get_team_executors(message.from_user.id)
	await state.update_data(expire_at=expire_at)
	await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥: ", reply_markup=await team_choose_keyboard(my_teams))
	await state.set_state(NewTask.team)

@router.callback_query(NewTask.team, F.data.startswith("team_ex"))
async def process_team(callback: CallbackQuery, state: FSMContext):
	team_id = int(callback.data.split(":")[1])
	executors = await get_executors_from_team(team_id=team_id)
	if not executors:
		await callback.message("ü§î –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
		await state.clear()
		return
	message_text = (
		"üë• <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b>\n\n"
	)
	for executor in executors:
		message_text += (
			f"üë§ {executor.username} "
			f"(ID: {executor.telegram_id})\n"
			f"	‚ö°Ô∏è –†–∞–±–æ—á–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {executor.workload}\n"
    	f"	‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {executor.rating}\n\n"
		)

	await callback.message.answer(
		text=message_text,
		parse_mode="HTML",
		reply_markup=await executor_choose_keyboard(executors=executors, team_id=team_id, is_init=True)
	)
	await state.set_state(NewTask.executors_username)

@router.callback_query(NewTask.executors_username, F.data.startswith("executor"))
async def process_executors_username(callback: CallbackQuery, state: FSMContext):
	team_id = int(callback.data.split(":")[2])
	executors = await get_executors_from_team(team_id=team_id)
	if not executors:
		await callback.message("ü§î –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
		await state.clear()
		return
	data = await state.get_data()

	selected_executors = data.get("executors_username") if data.get("executors_username") else []
	selected_executors.append(callback.data.split(":")[1])
	filtered_executors = [i for i in executors if i.username not in selected_executors] if selected_executors else executors
	message_text = "üë• <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b>\n\n"
	await state.update_data(executors_username=selected_executors)
	for executor in filtered_executors:
		message_text += (
			f"üë§ {executor.username} "
			f"(ID: {executor.telegram_id})\n"
			f"	‚ö°Ô∏è –†–∞–±–æ—á–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {executor.workload}\n"
			f"	‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {executor.rating}\n\n"
		)

	await state.set_state(NewTask.executors_username)
	await callback.message.answer(
		text=message_text,
		parse_mode="HTML",
		reply_markup=await executor_choose_keyboard(executors=filtered_executors, team_id=team_id)
	)

@router.callback_query(NewTask.executors_username, F.data == "save_executors")
async def process_save_executors(callback: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	if not data.get("executors_username"):
		await callback.message.answer("ü§¨ –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!!!\n\nüë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–≤–µ—Ä—Ö—É")
		return
	print("Save executors")
	await callback.message.answer("üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞–¥–∞—á–µ? –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.\n‚ùå –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /skip_file.")
	await state.set_state(NewTask.task_file)

@router.message(NewTask.task_file, F.document)
async def process_task_file(message: Message, state: FSMContext):
	file_id = message.document.file_id
	print(f"[-1231244123-]{file_id}")
	await state.update_data(task_file=file_id)
	await create_and_save_task(message, state)
	#! –ü–û–î–£–ú–ê–¢–¨ –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –§–ê–ô–õ–û–í

@router.message(NewTask.task_file, F.text == "/skip_file")
async def skip_file_upload(message: Message, state: FSMContext):
	await state.update_data(task_file=None)
	data = await state.get_data()
	print(f"[+] Data: {data}")
	await create_and_save_task(message, state)

async def create_and_save_task(message: types.Message, state: FSMContext):
	async with RedisUsers() as redis_client:
		data = await state.get_data()
		task_data = TaskCreate(
			task_description=data.get("task_description"),
			expire_at=data.get("expire_at"),
			executors_username=data.get("executors_username"),
			creator_id=message.from_user.id,
			status="in_process",
			file_id=data.get("task_file")
		)
		print(f"[+_=] {data.get("task_file")}")
		try:
			created_task = await create_task(task_data)
			task_dict = {
				"id": created_task.id,
				"task_description": created_task.task_description,
				"expire_at": created_task.expire_at.isoformat(),
				"executors_username": ', '.join([executor.username for executor in created_task.executors]),
				"executors_id": [executor.telegram_id for executor in created_task.executors],
				"creator_id": created_task.creator_id,
				"status": created_task.status,
				"file_id": created_task.file_id
			}
			confirm_data = confirm_task.apply_async((task_dict, ), countdown=((created_task.expire_at - datetime.now()).total_seconds()))
			notificate_data = notificate_user.apply_async((task_dict, ), countdown=((created_task.expire_at - datetime.now()).total_seconds() - 300))
			await redis_client.set(f"confirm_task_id:{str(created_task.id)}", confirm_data.id)
			await redis_client.set(f"notificate_task_id:{created_task.id}", notificate_data.id)

			notification_text = (f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
													f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {created_task.task_description}\n"
													f"‚åõ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {created_task.expire_at}\n"
													f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {', '.join([executor.username for executor in created_task.executors])}")
			await message.answer(text=notification_text)
			if created_task.file_id:
				notification_text += f"\nüìé –¢–∞–∫–∂–µ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª"
				await message.answer_document(document=created_task.file_id)
			await state.clear()
		except Exception as e:
			await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
			await state.clear()

async def confirm_task_process(task_id: str):
	async with RedisUsers() as redis_client:
		confirm_task_id = await redis_client.get(f"confirm_task_id:{task_id}")
		notificate_task_id = await redis_client.get(f"notificate_task_id:{task_id}")
		if confirm_task_id and notificate_task_id:
			confirm_task_result = confirm_task.AsyncResult(confirm_task_id)
			notificate_task_result = notificate_user.AsyncResult(notificate_task_id)
			if confirm_task_result and notificate_task_result:
				await redis_client.delete(f"confirm_task_id:{task_id}", f"notificate_task_id:{task_id}")
				confirm_task_result.abort()
				notificate_task_result.abort()
				confirmed_task = await stop_task(task_id=int(task_id), status="completed")
				#! REVOKE - –∑–∞–¥–∞—á–∏ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è, –∞ —É –º–µ–Ω—è –±–ª—è—Ç—å –æ–Ω–∏ –µ—â–µ –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è, –Ω–æ –º–Ω–µ –≤ –ø–∞–¥–ª—É
				# if request.POST.get('stop'):
				# print('stop')
				# celery_app.control.revoke(process_id, terminate=True)
				#! REVOKE
				print("[-] Abort tasks")
				return confirmed_task
		return True

@router.callback_query(F.data == "change_team")
async def change_team_handler(callback: CallbackQuery, state: FSMContext):
	teams = await get_team_executors(user_id=callback.from_user.id)
	if not teams:
		await callback.message.answer("ü§î –í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	await callback.message.answer(text=f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", reply_markup=await team_choose_keyboard(teams))
	await state.set_state(AddTeam.team_id)

@router.callback_query(AddTeam.team_id, F.data.startswith("team_ex"))
async def choose_team_handler(callback: CallbackQuery, state: FSMContext):
	team_id = int(callback.data.split(":")[1])
	await state.update_data(team_id=team_id)
	executors = await get_executors_from_team(team_id=team_id)
	if not executors:
		await callback.message("ü§î –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
		await state.clear()
		return
	if len(executors) < 2:
		await callback.message.answer(text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω")
	await callback.message.answer(text="üìù –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:")
	await state.set_state(AddTeam.new_executors)

@router.message(AddTeam.new_executors)
async def save_team_changes(message: Message, state: FSMContext):
	new_executors = message.text.split(",")
	data = await state.get_data()
	team_id = data.get("team_id")
	updated_team = await update_team_executors(team_id=team_id, new_executors=new_executors)
	if not updated_team:
		await message.answer("‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ( –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç )")
		return
	await message.answer("‚úÖ –ù–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

@router.callback_query(F.data == "confirm_task")
async def confirm_task_handler(callback: CallbackQuery):
	tasks_as_creator = await get_processed_tasks(user_id=callback.from_user.id)
	if not tasks_as_creator:
		await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
		return

	message_text = "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"

	for task in tasks_as_creator:
		message_text += (
			f"üìù –ó–∞–¥–∞—á–∞ #{task.id}\n"
			f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n\n"
		)
	task_ids = [str(i.id) for i in tasks_as_creator]

	await callback.message.answer(
		text=message_text,
		reply_markup=await confirm_task_keyboard(task_ids=task_ids)
	)

@router.callback_query(F.data.startswith("close_task"))
async def confirm_task_by_id(callback: CallbackQuery):
	task_id = str(callback.data.split(":")[1])
	await confirm_task_process(task_id=task_id)
	await callback.message.answer("Successful confirm task")
	
@router.callback_query(F.data == "my_tasks")
async def get_user_tasks_handler(callback: CallbackQuery):
	tasks = await get_user_tasks(user_id=int(callback.from_user.id))
	if not tasks:
		await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
		return
	print(tasks[0].creator_id)
	message_text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:</b>\n\n"
	for task in tasks:
		urgency_status = "üö® –°–†–û–ß–ù–û, –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–Ω—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" if task.expire_at.date() == datetime.now().date() else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"

		message_text += (
			f"<b>–ó–∞–¥–∞—á–∞ #{task.id}</b>\n"
			f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ –°—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
			# f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: @{creators[i]}\n"
		)

		if task.expire_at.date() == datetime.now().date():
			message_text += f"‚ùóÔ∏è {urgency_status}\n"

		message_text += "\n" + "-" * 30 + "\n"

	await callback.message.answer(
			text=message_text,
			parse_mode="HTML"
	)

@router.callback_query(F.data == "change_executor")
async def change_executor_handler(callback: CallbackQuery, state: FSMContext):
	processed_tasks = await get_processed_tasks(user_id=callback.from_user.id)
	await state.set_state(ExecutorsTask.task_id)
	result_text = "<u>üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</u>\n\n"
	formatted_tasks = []
	for task in processed_tasks:
		task_info = (
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
			f"üìå <b>–ó–∞–¥–∞—á–∞:</b> {htd.quote(task.task_description)}\n"
			f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.capitalize()}\n"
		)
		if task.file_id:
			task_info += f"üìé <b>–§–∞–π–ª:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n"
		formatted_tasks.append(task_info)
	
	result_text += "\n".join(formatted_tasks)
	await callback.message.answer(
		text=result_text,
		parse_mode="HTML",
		reply_markup=await processed_tasks_keyboard(tasks=processed_tasks)
	)

@router.callback_query(ExecutorsTask.task_id, F.data.startswith("change_task_ex"))
async def set_team(callback: CallbackQuery, state: FSMContext):
	task_id = int(callback.data.split(":")[1])
	await state.update_data(task_id=task_id)
	teams = await get_team_executors(user_id=callback.from_user.id)
	if not teams:
		await callback.message.answer("ü§î –í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	await callback.message.answer(text=f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", reply_markup=await team_choose_keyboard(teams))
	await state.set_state(ExecutorsTask.team_id)

@router.callback_query(ExecutorsTask.team_id, F.data.startswith("team_ex"))
async def set_executors(callback: CallbackQuery, state: FSMContext):
	team_id = int(callback.data.split(":")[1])
	await state.update_data(team_id=team_id)
	executors = await get_executors_from_team(team_id=team_id)
	if not executors:
		await callback.message("ü§î –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
		await state.clear()
		return
	await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=await executor_choose_keyboard(executors=executors, team_id=team_id, is_init=True))
	await state.set_state(ExecutorsTask.executors)

@router.callback_query(ExecutorsTask.executors, F.data.startswith("executor"))
async def choose_executors(callback: CallbackQuery, state: FSMContext):
	new_executor = callback.data.split(":")[1]
	team_id = int(callback.data.split(":")[2])
	data = await state.get_data()
	executors = await get_executors_from_team(team_id=team_id)
	if not executors:
		await callback.message("ü§î –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–µ—Ç –ª–∏–±–æ –æ–Ω–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
		await state.clear()
		return
	selected_executors = data.get("executors") if data.get("executors") else []
	selected_executors.append(new_executor)
	filtered_executors = [i for i in executors if i.username not in selected_executors] if selected_executors else executors
	await state.update_data(executors=selected_executors)
	await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=await executor_choose_keyboard(executors=filtered_executors, team_id=team_id))

@router.callback_query(ExecutorsTask.executors, F.data == "save_executors")
async def save_executors(callback: CallbackQuery, state: FSMContext):
	data = await state.get_data()
	[updated_processed_task, existing_executors] = await update_executors_in_task(new_executors_usernames=data.get("executors"), task_id=int(data.get("task_id")))
	await state.clear()

	new_executors_list = ", ".join([f"@{executor.username}" for executor in updated_processed_task.executors])
	message_text = (
		f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
		f"üìù –ó–∞–¥–∞—á–∞: <i>{htd.quote(updated_processed_task.task_description)}</i>\n"
		f"üë• –ù–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {new_executors_list}\n"
		f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {updated_processed_task.expire_at.strftime('%d.%m.%Y %H:%M')}\n\n"
		f"–ù–æ–≤—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –£–¥–∞—á–∏! üöÄ\n\n"
	)
	if existing_executors:
		message_text += "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–¥–∞—á–µ —Ä–∞–Ω–µ–µ:\n"
		message_text += "\n".join([f"- @{executor}" for executor in existing_executors])
	await callback.message.answer(
		text=message_text,
		parse_mode="HTML"
	)

@router.callback_query(F.data == "change_time")
async def change_time_handler(callback: CallbackQuery):
	await callback.message.answer("change_time")

@router.callback_query(F.data == "assigned_tasks")
async def assigned_tasks_handler(callback: CallbackQuery):
	assigned_tasks = await get_assigned_tasks(user_id=callback.from_user.id)
	if not assigned_tasks:
		await callback.message.answer("ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.")
		return
	text = htd.bold("üìù –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n")
	for task in assigned_tasks:
			task_text = (
				f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
				f"‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
				f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
				f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
				f"üîÑ –°—Ç–∞—Ç—É—Å: {htd.code(task.status)}{status_emoji[task.status]}\n"
			)
			if task.executors:
				executors = ", ".join(
					f"{executor.first_name} {executor.last_name or ''} (@{executor.username})"
					for executor in task.executors
				)
				task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executors}\n"
			task_text += "\n" + "-" * 30 + "\n"
			text += task_text
	await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "all_tasks")
async def all_tasks_handler(callback: CallbackQuery):
	all_tasks = await get_all_tasks(user_id=callback.from_user.id)
	if not all_tasks:
		await callback.message.answer("ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É.")
		return
	text = htd.bold("üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n")
	for task in all_tasks:
		task_text = (
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
			f"‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
			f"üîÑ –°—Ç–∞—Ç—É—Å: {htd.code(task.status)}{status_emoji[task.status]}\n"
		)
		if task.executors:
			executors = ", ".join(
				f"{executor.first_name} {executor.last_name or ''} (@{executor.username})"
				for executor in task.executors
			)
			task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executors}\n"
		task_text += "\n" + "-" * 30 + "\n"
		text += task_text
	await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "change_status")
async def change_status_handler(callback: CallbackQuery):
	try:
		status = await change_status(user_id=callback.from_user.id)
		image = "active_status" if status else "passive_status"
		message_text = (
			"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–ê–∫—Ç–∏–≤–Ω—ã–π*!\n\n"
			"–í—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n"
			"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.\n\n"
			"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!"
    ) if status else (
			"üîï –í–∞—à —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π*.\n\n"
			"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –Ω–µ–≤–∏–¥–∏–º—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n"
			"–ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –±—É–¥–µ–º –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –≤—ã —Ä–µ—à–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π.\n\n"
			"–ñ–¥–µ–º –≤–∞—Å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"
		)
		await callback.message.answer_photo(
			photo=FSInputFile(f"./app/images/{image}.jpg"),
			caption=message_text,
			parse_mode="Markdown"
		)
	except Exception as exc:
		await callback.message.answer(f"[-] Error with change status: {exc}")

@router.callback_query(F.data == "create_team")
async def enter_team_name(callback: CallbackQuery, state: FSMContext):
	await callback.message.answer("üßëüèº‚Äçüíª Please enter a name of your new team")
	await state.set_state(NewTeam.team_name)

@router.message(NewTeam.team_name)
async def enter_executors(message: Message, state: FSMContext):
	await state.update_data(team_name=message.text.strip().lower().capitalize())
	await message.answer("‚úçüèªüë• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ username –≤–∞—à–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ( –±–µ–∑ @, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ). –ï—Å–ª–∏ –ø–æ–∫–∞ —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")
	await state.set_state(NewTeam.executors_username)

@router.message(NewTeam.executors_username)
async def create_team_handler(message: Message, state: FSMContext):
	if message.text != ".":
		executors_username = message.text.strip().split(",")
	else:
		executors_username = "."
	await state.update_data(executors_username=executors_username)
	await save_team(message, state)

async def save_team(message: Message, state: FSMContext):
	data = await state.get_data()
	[new_team, failed_executors, creator] = await create_team(creator_id=message.from_user.id, team_name=data.get("team_name"), executors_username=data.get("executors_username"))
	message_text = (
		f"<b>üéâ –ö–æ–º–∞–Ω–¥–∞ {new_team.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ</b>\n\n"
		f"üëë –ó–∞–∫–∞–∑—á–∏–∫: @{creator.username}\n"
		f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n"
	)
	if data.get("executors_username") != ".":
		message_text += "\n".join([f"- <a href='https://t.me/{username}'>@{username}</a>" for username in data.get("executors_username") if username != message.from_user.username])
	else:
		message_text += "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã."
	if failed_executors:
		message_text += "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: "
		for i in failed_executors:
			message_text += f"\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {i} –Ω–µ –Ω–∞–π–¥–µ–Ω"
		message_text += "\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω –≤–æ–æ–±—â–µ. \n‚ûï –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é"
	await message.answer(text=message_text, parse_mode="HTML")
	await state.clear()

#? 100% - –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò, –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô ( –î–û–ë–ê–í–õ–ï–ù–ò–ï, –£–î–ê–õ–ï–ù–ò–ï, –°–ú–ï–ù–ê ), –ü–†–ò–í–Ø–ó–ö–ê –§–ê–ô–õ–û–í, –ö–ê–†–¢–ò–ù–û–ö –ò –¢–î –ö –ó–ê–î–ê–ß–ê–ú
#? 50%/50% -  –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–ò –ü–û–õ–£–ß–ï–ù–ò–ò –ó–ê–î–ê–ß–ò

@router.message(Command("all_executors"))
async def all_executors_command(message: Message):
	teams = await get_teams_as_creator(creator_id=message.from_user.id)
	if not teams:
		await message.answer("‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return

	message_text = "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
	for team in teams:
		message_text += (
			f"üìã –ö–æ–º–∞–Ω–¥–∞: *{team.name}*\n"
			f"üëë –ó–∞–∫–∞–∑—á–∏–∫: {htd.link(f'@{team.creator.username}', f'tg://user?id={team.creator.telegram_id}')}\n"
			f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n"
		)
		if team.executors:
			for executor in team.executors:
				message_text += (
					f"- {htd.link(f'@{executor.username}', f'tg://user?id={executor.telegram_id}')} - —Å—Ç–∞—Ç—É—Å: {'üòé –ê–∫—Ç–∏–≤–µ–Ω' if executor.status else 'üò¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n"
				)
		else:
			message_text += "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.\n"
		message_text += "\n" + "-" * 30 + "\n"

	await message.answer(text=message_text, parse_mode="HTML")

@router.message(Command("create_task"))
async def set_task_handler(message: Message, state: FSMContext):
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
	await state.set_state(NewTask.task_description)

@router.message(Command("confirm_task"))
async def confirm_task_handler(message: Message):
	tasks_as_creator = await get_processed_tasks(user_id=message.from_user.id)
	if not tasks_as_creator:
		await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
		return

	message_text = "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n"
	for task in tasks_as_creator:
		message_text += (
			f"üìù –ó–∞–¥–∞—á–∞ #{task.id}\n"
			f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
		)

	task_ids = [str(i.id) for i in tasks_as_creator]
	await message.answer(
		text=message_text,
		reply_markup=await confirm_task_keyboard(task_ids=task_ids)
	)

@router.message(Command("change_executors"))
async def change_executor_handler(message: Message, state: FSMContext):
	processed_tasks = await get_processed_tasks(user_id=message.from_user.id)
	await state.set_state(ExecutorsTask.task_id)

	result_text = "<u>üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:</u>\n"
	formatted_tasks = []
	for task in processed_tasks:
		task_info = (
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
			f"üìå <b>–ó–∞–¥–∞—á–∞:</b> {htd.quote(task.task_description)}\n"
			f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.capitalize()}\n"
		)
		if task.file_id:
			task_info += f"üìé <b>–§–∞–π–ª:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n"
		formatted_tasks.append(task_info)

	result_text += "\n".join(formatted_tasks)
	await message.answer(
		text=result_text,
		parse_mode="HTML",
		reply_markup=await processed_tasks_keyboard(tasks=processed_tasks)
	)
@router.message(Command("my_tasks"))
async def get_user_tasks_handler(message: Message):
	tasks = await get_user_tasks(user_id=int(message.from_user.id))
	if not tasks:
		await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
		return

	message_text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:</b>\n"
	for task in tasks:
		urgency_status = "üö® –°–†–û–ß–ù–û, –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–Ω—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" if task.expire_at.date() == datetime.now().date() else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
		message_text += (
			f"<b>–ó–∞–¥–∞—á–∞ #{task.id}</b>\n"
			f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è∞ –°—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
		)
		if task.expire_at.date() == datetime.now().date():
			message_text += f"‚ùóÔ∏è {urgency_status}\n"
		message_text += "\n" + "-" * 30 + "\n"

	await message.answer(text=message_text, parse_mode="HTML")

@router.message(Command("assigned_tasks"))
async def assigned_tasks_handler(message: Message):
	assigned_tasks = await get_assigned_tasks(user_id=message.from_user.id)
	if not assigned_tasks:
		await message.answer("ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.")
		return

	text = htd.bold("üìù –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n")
	for task in assigned_tasks:
		task_text = (
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
			f"‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
			f"üîÑ –°—Ç–∞—Ç—É—Å: {htd.code(task.status)}{status_emoji[task.status]}\n"
		)
		if task.executors:
			executors = ", ".join(
				f"{executor.first_name} {executor.last_name or ''} (@{executor.username})"
				for executor in task.executors
			)
			task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executors}\n"
		task_text += "\n" + "-" * 30 + "\n"
		text += task_text

	await message.answer(text, parse_mode="HTML")

@router.message(Command("all_tasks"))
async def all_tasks_handler(message: Message):
	all_tasks = await get_all_tasks(user_id=message.from_user.id)
	if not all_tasks:
		await message.answer("ü§∑‚Äç‚ôÇÔ∏è –í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É.")
		return

	text = htd.bold("üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n")
	for task in all_tasks:
		task_text = (
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task.id}\n"
			f"‚è∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.expire_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task.task_description}\n"
			f"üîÑ –°—Ç–∞—Ç—É—Å: {htd.code(task.status)}{status_emoji[task.status]}\n"
		)
		if task.executors:
			executors = ", ".join(
				f"{executor.first_name} {executor.last_name or ''} (@{executor.username})"
				for executor in task.executors
			)
			task_text += f"üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {executors}\n"
		task_text += "\n" + "-" * 30 + "\n"
		text += task_text

	await message.answer(text, parse_mode="HTML")
	
@router.message(Command("change_status"))
async def change_status_handler(message: Message):
	try:
		status = await change_status(user_id=message.from_user.id)
		image = "active_status" if status else "passive_status"
		message_text = (
			"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–ê–∫—Ç–∏–≤–Ω—ã–π*!\n"
			"–í—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞–º –∑–∞–¥–∞–Ω–∏–µ.\n"
			"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.\n"
			"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!"
		) if status else (
			"üîï –í–∞—à —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π*.\n"
			"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –Ω–µ–≤–∏–¥–∏–º—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.\n"
			"–ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –±—É–¥–µ–º –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –≤—ã —Ä–µ—à–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π.\n"
			"–ñ–¥–µ–º –≤–∞—Å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"
		)
		await message.answer_photo(
			photo=FSInputFile(f"./app/images/{image}.jpg"),
			caption=message_text,
			parse_mode="Markdown"
		)
	except Exception as exc:
		await message.answer(f"[-] Error with change status: {exc}")

@router.message(Command("create_team"))
async def enter_team_name(message: Message, state: FSMContext):
	await message.answer("üßëüèº‚Äçüíª Please enter a name of your new team")
	await state.set_state(NewTeam.team_name)

@router.message(Command("change_team"))
async def change_team_handler(message: Message, state: FSMContext):
	teams = await get_team_executors(user_id=message.from_user.id)
	if not teams:
		await message.answer("ü§î –í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	await message.answer(text=f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", reply_markup=await team_choose_keyboard(teams))
	await state.set_state(AddTeam.team_id)
from celery import Celery
from celery.contrib.abortable import AbortableTask

from app.requests import stop_task
from config import settings

import requests
import asyncio

app = Celery(__name__)
app.conf.broker_url = "redis://redis:6379/0"
app.conf.result_backend = "redis://redis:6379/0"

@app.task(name="create_task", base=AbortableTask)
def confirm_task(task_data):
	loop = asyncio.get_event_loop()
	print(task_data)
	if not confirm_task.is_aborted():
		loop.run_until_complete(stop_task(task_id=task_data.get("id"), status="canceled"))
		print("[!] Canceled task")
		return "successful"
	# loop.run_until_complete(stop_task(task_id=task_data.get("id"), status="completed"))
	# print("[+] Completed task")
	# return None

@app.task(name="notificate", base=AbortableTask)
def notificate_user(task_data):
	if not notificate_user.is_aborted():
		notification_text = (
			f"‚ö†Ô∏è '–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!'\n\n"
			f"üÜî ID –∑–∞–¥–∞—á–∏: {task_data.get("id")}\n"
			f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {task_data.get("task_description")}\n"
			f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_data.get("expire_at")}\n"
			f"üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {task_data.get("status")}\n\n"
			f"üî• –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω!"
		)
		for executor_id in task_data.get("executors_id"):
			requests.get(f"{settings.BOT_API_URL}{settings.BOT_TOKEN}/sendMessage?chat_id={executor_id}&text={notification_text}")
		return None
	# print("[-] Notificate is not require")
	# return None

#! –í –ò–î–ï–ê–õ–ï, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ –¥–≤–µ —Ç–∞—Å–∫–∏ –Ω–µ –±—ã–ª–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–∞—Ç—å –æ–¥–Ω—É –¥–ª—è notification, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é, —É–∂–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–æ –º–Ω–µ –ª–µ–Ω—å, –ø–æ—Ö—É–π –∏ —Ç–¥